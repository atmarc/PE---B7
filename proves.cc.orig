#include <iostream>
#include <vector>
using namespace std;

int partition(vector<int> & a, int start, int end) {
  unsigned int pivot = a[start];
  unsigned int from_left = start+1;
  unsigned int from_right = end;
  unsigned int tmp;
  
  while (from_left != from_right) {
    if (a[from_left]  <= pivot) from_left++;
    else {
      while (( from_left != from_right)  && (pivot < a[from_right])) from_right--;
      tmp =  a[from_right];
      a[from_right] = a[from_left];
      a[from_left] = tmp;
    }
  }
  
  if (a[from_left]>pivot) from_left--;
  a[start] = a[from_left];
  a[from_left] = pivot;

  return (from_left);
}

void quickSort(vector <int> & a, int p, int r) {
  if (p < r) {
    int q = partition(a, p, r);
    quickSort(a, p, q - 1);
    quickSort(a, q + 1, r);
  }
}


int entropia (vector <int> vector) {
    int result = 0;
    for (int p = 0; p < vector.size(); p++) {
        int i = p + 1;
        while(i < vector.size()) if(vector[p] > vector[i]) result ++;
    }
    return result;
}

void merge(vector<int>& v, int left, int mid, int right) {
    int n = right - left + 1;
    vector<int> aux(n);
    int i = left;
    int j = mid + 1;
    int k = 0;
    while (i <= mid and j <= right) {
        if (v[i] <= v[j]) {
            aux[k] = v[i];
            ++i;
        }
        else {
            aux[k] = v[j];
            ++j;
        }
        ++k;
    }
    while (i <= mid) {
        aux[k] = v[i];
        ++k;
        ++i;
    }
    while (j <= right) {
        aux[k] = v[j];
        ++k;
        ++j;
    }
    for (k = 0; k < n; ++k) v[left+k] = aux[k];
}
int merge_sort(vector<int>& v, int left, int right) {
    if (left < right) {
        int m = (left + right + 1)/2;
        int p = merge_sort(v, left, m) + merge_sort(v, m + 1, right);
        merge(v, left, m, right);
        return 2 + p;
    }
    return 1;
}

int main () {

    vector <int> V = {3,2,1,1};;
    //cout << merge_sort(V, 0, V.size() - 1) << endl; 
    
    quickSort(V,0, V.size() - 1);
    for (int i = 0; i < V.size(); ++i) cout << V[i] << ' ';
    //cout << quick_sort(0, V.size() - 1, V) << endl;
}